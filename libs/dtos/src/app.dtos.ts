import { IsEmail, IsHexadecimal, IsUrl } from 'class-validator';

export class IncomingMessageNotificationDto {
  domain: string; // The domain name this message was received from.
  @IsEmail()
  recipient: string; // The recipient of the message as reported by MAIL TO during SMTP chat
  @IsEmail()
  sender: string; // The sender of the message as reported by MAIL FROM during SMTP chat. (This value may differ from the MIME header)
  from: string; // The sender of the message as reported by from message header, for example "Bob Lee <blee@mailgun.net>".
  subject: string; // The subject string
  'body-plain': string; // The text version of the email. This field is always present. If the incoming message only has HTML body, Mailgun will create a text representation for you.
  'stripped-text': string; // The text version of the message without the quoted parts and signature block (if found)
  'stripped-signature': string; // The signature block stripped from the plain text message (if found)
  'body-html': string; // The HTML version of the message, if message was multipart. Note that all parts of the message will be posted, not just text/html. For instance, if a message arrives with "foo" part it will be posted as "body-foo"
  'stripped-html': string; // The HTML version of the message, without the quoted parts
  attachments: string; // The string that contains a JSON list of metadata objects, one for each attachment.
  @IsUrl({
    protocols: process.env.NODE_ENV !== 'prod' ? ['http', 'https'] : ['https'],
    allow_underscores: true,
    host_whitelist:
      process.env.NODE_ENV !== 'prod'
        ? ['example.com']
        : [
            'mailgun.net',
            'storage-us-west1.api.mailgun.net',
            'api.mailgun.net',
          ],
  })
  'message-url': string; // A URL that you can use to get and/or delete the message. Only present in the payload posted to the notification URL
  timestamp: number; // The number of seconds passed since January 1, 1970 (See Securing Webhooks)
  token: string; // A randomly generated string with a length of 50 (See Securing Webhooks)
  @IsHexadecimal()
  signature: string; // A string with hexadecimal digits generated by HMAC algorithm (See securing webhooks).
  'message-headers': string; // A list of MIME headers dumped to a JSON string (The order of headers is preserved)
  'Content-id-map': string;
}

export class IncomingMessageDto {
  subject: string; // "\"Mailgun is awesome\"",
  sender: string; // "foo.bar@my-domain.com",
  'stripped-html': string; // "<html>This is some html</html>",
  'X-Mailgun-Tag': string; // "earth",
  recipients: string; // "cool.barr@cool.com, bar.baz@gmail.com",
  'Mime-Version': string; // "1.0",
  from: string; // "foo.bar@my-domain.com",
  'Body-Plain': string; // "This is some html",
  Subject: string; // "\"Mailgun is awesome\"",
  To: string; // "cool.barr@cool.com, bar.baz@gmail.com",
  content_type: string; // "text/html; charset=ascii",
  From: string; // "foo.bar@my-domain.com",
  content_transfer_encoding: string; // "7bit",
  'Message-Id': string; // "<xxxxxxxxxxxxx.111111111111111@my-domain.com>",
  'Message-Headers': string[][];
  'stripped-text': string; // "This is some html",
  'Body-HTML': string; // "<html>This is some html</html>"
}
